from flask import Flask, render_template, request, jsonify
import openai

app = Flask(__name__)

# OpenAI API 키 설정
openai.api_key = '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'

# 기본 경로에서 index.html을 렌더링
@app.route('/')
def index():
    return render_template('index.html')

# 수학 문제를 해결하는 경로
@app.route('/solve', methods=['POST'])
def solve():
    data = request.get_json()
    question = data.get('question')

    if not question:
        return jsonify({'error': '수학 문제를 입력하세요.'}), 400

    try:
        # 질문을 설정
        question_input = f"다음 수학 문제를 풀어주세요: {question}"

        # ChatGPT API 호출
        response = openai.chat.completions.create(model="gpt-4o-mini",  # 사용할 모델 지정 (예: "gpt-3.5-turbo", "gpt-4")
        messages=[
            {"role": "system", "content": "당신은 유용한 어시스턴트입니다."},
            {"role": "user", "content": question_input},
        ],
        max_tokens=1000,  # 응답의 최대 토큰 수
        temperature=0.7)

        # 응답 출력
        answer = response.choices[0].message.content
        #print(f"ChatGPT: {answer}")

        return jsonify({'answer': answer})

    except openai.OpenAIError as e:
        #print(f"OpenAI API 오류: {e}")
        return jsonify({'OpenAI API 오류': str(e)}), 500
    except Exception as e:
        #print(f"기타 오류: {e}")
        return jsonify({'기타 오류': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
