# -*- coding: utf-8 -*-
"""밑바닥부터 시작하는 딥러닝 3권.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19XgmMZHOb02-veDbaRVLlywM0eBvPUDA
"""

import numpy as np


class Variable:
    def __init__(self, data):
        self.data = data


data = np.array(1.0)
x = Variable(data)
print(x.data)

x.data = np.array(2.0)
print(x.data)

import numpy as np


class Variable:
    def __init__(self, data):
        self.data = data


class Function:
    def __call__(self, input):      # 일반적으로 어떤 클래스에 값을 입력하면 그 값은 이 클래스의 __init__ 메서드의 두번째 매개변수부터 차례대로 저장된다.
                                    # 이때 만약 __init__ 메서드가 정의되어 있지 않거나, 두번째 이상 매개변수가 없다면, 이 클래스에 아무런 값도 넣을수 없다!(아무것도 없다만 입력가능하다!)
        x = input
        y = self
        output = Variable(y)
        return output

    def forward(self, in_data):
        raise NotImplementedError()


class Square:
    def forward(self, x):
        return x ** 2
    def __call__(self, input):      # 일반적으로 어떤 클래스에 값을 입력하면 그 값은 이 클래스의 __init__ 메서드의 두번째 매개변수부터 차례대로 저장된다.
                                    # 이때 만약 __init__ 메서드가 정의되어 있지 않거나, 두번째 이상 매개변수가 없다면, 이 클래스에 아무런 값도 넣을수 없다!(아무것도 없다만 입력가능하다!)
        x = input.data
        y = self.forward(x)
        output = Variable(y)
        return output

x = Variable(np.array(10))
f = Square()
y = f(x)
print(type(y))
print(y.data)

import numpy as np


class Variable:
    def __init__(self, data):
        self.data = data


class Function:
    def __call__(self, input):  # input 에는 Variable의 객체(x)가 저장된다!
        t = input.data
        s = self.forward(t)     # 객체 f 가 파생된 클래스의 foward 메서드에 t 를 입력해라! (일반적으로 객체 f 의 메서드는 객체 f 가 파생된 클래스의 foward 메서드이다!)
        output = Variable(s)
        return output

    def forward(self, in_data):
        raise NotImplementedError()


class Square(Function):
    def forward(self, x):
        return x ** 2


x = Variable(np.array(10))
f = Square()
y = f(x)
print(type(y))
print(y.data)
print(x.data)
np.array(9)

import numpy as np


class Variable:
    def __init__(self, data):
        self.data = data


class Function:
    def __call__(self, input):
        x = input.data
        y = self.forward(x)
        output = Variable(y)
        return output

    def forward(self, x):
        raise NotImplementedError()


class Square(Function):
    def forward(self, x):
        return x ** 2


class Exp(Function):
    def forward(self, x):
        return np.exp(x)


A = Square()
B = Exp()
C = Square()

x = Variable(np.array(0.5))
a = A(x)        # x라는 객체는 Square 클래스의 __call__ 메서드 의 input 매개변수에 저장된다!
b = B(a)
y = C(b)
print(y.data)

import numpy as np


class Variable:
    def __init__(self, data):
        self.data = data


class Function:
    def __call__(self, input):
        x = input.data
        y = self.forward(x)
        output = Variable(y)
        self.input = input
        self.output = output
        return output

    def forward(self, x):
        raise NotImplementedError()


class Square(Function):
    def forward(self, x):
        return x ** 2


class Exp(Function):
    def forward(self, x):
        return np.exp(x)


def numerical_diff(f, x, eps=1e-4):
    x0 = Variable(x.data - eps)
    x1 = Variable(x.data + eps)
    y0 = f(x0)
    y1 = f(x1)
    return (y1.data - y0.data) / (2 * eps)


f = Square()
x = Variable(np.array(2.0))
dy = numerical_diff(f, x)
print(dy)


def f(x):
    A = Square()
    B = Exp()
    C = Square()
    return C(B(A(x)))


x = Variable(np.array(0.5))
dy = numerical_diff(f, x)
print(dy)